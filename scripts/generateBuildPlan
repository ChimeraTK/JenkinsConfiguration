#!/usr/bin/python3

import sys
import shutil
import os
import glob
import copy

if len(sys.argv) != 2 :
  print("Usage: generateBuildPlan <jobname>")
  sys.exit(1)

jobname=sys.argv[1]

print("Generating build plan for "+jobname+"...")



def findReverseDependencies(project) :
  projectCleaned = project.replace("/","_")

  dir = '/home/msk_jenkins/dependency-database/forward/' + projectCleaned
  revDeps = set()
  if os.path.isdir(dir) :
    for filename in glob.glob(dir+'/*') :
      with open(filename,'r') as file :
        revDeps.add(file.read().replace('\n', ''))

  return revDeps

def findReverseDependenciesDeep(project) :
  list = findReverseDependencies(project)
  deepList = copy.deepcopy(list)
  for p in list :
    l = findReverseDependenciesDeep(p)
    deepList.update(l)
  return deepList

def getDependenciesDeep(project) :
  deepList = set()

  projectCleaned = project.replace('/','_')
  with open('/home/msk_jenkins/dependency-database/reverse/' + projectCleaned) as file :
    while True :
      line = file.readline().replace('\n','')
      if not line :
        break
      deepList.add(line)
      deepList.update(getDependenciesDeep(line))

  return deepList


jobsToBuild = findReverseDependenciesDeep(jobname)
print("jobsToBuild: "+str(jobsToBuild))


print("Sorting...")

done = False

while not done :
  done = True

  jobsToBuildNew = []
  postponedJobs = []
  jobsBuilt = []

  for job in jobsToBuild :
    dependencies = getDependenciesDeep(job)

    # check if all dependencies are already built
    postpone = False
    for dep in dependencies :
      if dep in jobsToBuild and not dep in jobsBuilt :
        # dependencie not yet built but needs to be built
        postpone = True

        # if something needs to be reordered, we are not yet done
        done = False

    # add job either to new jobsToBuild list directly, or to postponedJobs (appended to jobsToBuild list at the end)
    if not postpone :
      jobsToBuildNew.append(job)
      jobsBuilt.append(job)
    else :
      postponedJobs.append(job)

  # put postponed jobs at the end
  jobsToBuildNew.extend(postponedJobs)
  jobsToBuild = copy.deepcopy(jobsToBuildNew)


print("Grouping...")

buildPlan = []
currentGroup = []
jobsBuilt = []

for job in jobsToBuild :
  dependencies = getDependenciesDeep(job)

  # check if all dependencies are already built
  startNewGroup = False
  for dep in dependencies :
    if dep in jobsToBuild and not dep in jobsBuilt :
      # dependencie not yet built but needs to be built
      startNewGroup = True

  print("job "+job+" startNewGroup "+str(startNewGroup))

  if not startNewGroup :
    currentGroup.append(job)
  else :
    # first add existing group to build plan and mark jobs in group as built
    buildPlan.append(currentGroup)
    jobsBuilt.extend(currentGroup)

    # start new group
    currentGroup = [job]

# add last group to build plan
buildPlan.append(currentGroup)

print(buildPlan)

with open("buildplan.txt", "w") as file:
  file.write(str(buildPlan))
